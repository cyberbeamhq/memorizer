[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "memorizer"
version = "0.1.0"
description = "Production-ready memory lifecycle framework for AI assistants and agents"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Memorizer Team", email = "team@memorizer.dev"},
]
keywords = ["ai", "memory", "agents", "llm", "framework"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "psycopg2-binary>=2.9.0",
    "python-dotenv>=1.0.0",
    "numpy>=1.24.0",
    "openai>=1.0.0",
    "cohere>=4.0.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "python-dateutil>=2.8.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "pydantic>=2.0.0",
    "celery>=5.3.0",
    "redis>=4.5.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.30.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-html>=3.2.0",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "httpx>=0.24.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pylint>=2.17.0",
    "autopep8>=2.0.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "locust>=2.17.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
    "cryptography>=41.0.0",
    "semgrep>=1.45.0",
    "ipython>=8.15.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "ipdb>=0.13.13",
    "rich>=13.5.0",
]
# Vector database providers
pinecone = [
    "pinecone-client>=2.2.0",
]
weaviate = [
    "weaviate-client>=3.0.0",
]
chroma = [
    "chromadb>=0.4.0",
]
pgvector = [
    "pgvector>=0.2.0",
]
# Monitoring and logging
monitoring = [
    "structlog>=23.0.0",
    "elasticsearch>=8.0.0",
    "fluent-logger>=0.10.0",
    "loguru>=0.7.0",
]
# Async support
async = [
    "aiofiles>=23.0.0",
    "aiohttp>=3.8.0",
    "aioredis>=2.0.0",
]
# Data processing
data = [
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]
# Web framework integrations
web = [
    "flask>=2.3.0",
    "django>=4.2.0",
    "starlette>=0.27.0",
]
# Authentication providers
auth = [
    "authlib>=1.2.0",
    "python-jose>=3.3.0",
    "passlib>=1.7.4",
]
# Cloud providers
cloud = [
    "boto3>=1.28.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.17.0",
]
# Message queues
queues = [
    "kafka-python>=2.0.0",
    "pika>=1.3.0",
    "celery[redis]>=5.3.0",
]
# AI/ML frameworks
ai = [
    "langchain>=0.0.300",
    "llama-index>=0.8.0",
    "autogpt>=0.4.0",
    "crewai>=0.1.0",
]
# Deployment tools
deploy = [
    "gunicorn>=21.2.0",
    "supervisor>=4.2.0",
]
# All optional dependencies
all = [
    "memorizer[pinecone,weaviate,chroma,pgvector,monitoring,async,data,web,auth,cloud,queues,ai,deploy]",
]

[project.urls]
Homepage = "https://github.com/memorizer/memorizer"
Documentation = "https://docs.memorizer.dev"
Repository = "https://github.com/memorizer/memorizer.git"
"Bug Tracker" = "https://github.com/memorizer/memorizer/issues"

[project.scripts]
memorizer = "memorizer.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["memorizer"]
known_third_party = ["fastapi", "pydantic", "uvicorn", "psycopg2", "redis", "celery"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "psycopg2.*",
    "redis.*",
    "fastapi.*",
    "uvicorn.*",
    "pydantic.*",
    "openai.*",
    "cohere.*",
    "transformers.*",
    "torch.*",
    "numpy.*",
    "pinecone.*",
    "weaviate.*",
    "chromadb.*",
    "celery.*",
    "prometheus_client.*",
    "sentry_sdk.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]